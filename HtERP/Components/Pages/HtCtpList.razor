@page "/HtCtpList"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using HtERP.Data
@using ClosedXML.Excel
@using System.Linq.Expressions
@using System.Reflection

@implements IDisposable
@inject IJSRuntime JS

@attribute [Authorize]


<PageTitle>HtCtpList</PageTitle>

<div>
    <strong><font size="5" style="color:#016f5e">CTP制版</font></strong>
    <em>（共: <strong>@numResults() </strong>条，数量: <strong>@TotalQuantity() </strong>，价格: <strong>@Totalprice()</strong>元。）</em>
    <div class="inline">
        <input type="checkbox" id="zd" @bind="自动刷新" />
        <label for="zd">自动刷新</label>
    </div>
    <button class="btn btn-primary" @onclick="查询今天">今天</button>
    <button class="btn btn-primary" @onclick="查询昨天">昨天</button>
    <button class="btn btn-primary" @onclick="查询前天">前天</button>
    <input @bind="Text1" placeholder="编号..." type="number" style="width:88px; background-color:antiquewhite" />
    <button class="btn btn-primary" @onclick="按编号查询">按编号查询</button>
    <button class="btn btn-rest" onclick="resetWidth()">重置列宽</button>
    <button class="btn btn-rest" @onclick="取消排序" title="恢复默认排序">取消排序</button>
    <button class="btn btn-download" @onclick="DownloadExcel">下载Excel</button>
</div>

<div>
    <input @bind="date1" id="tt" type="date" style="width:128px" />
    <input @bind="date2" id="tt" type="date" style="width:128px" />
    <input type="search" autofocus @bind="nameFilter" placeholder="客户..." style="width:128px" list="options" />
    <input type="search" autofocus @bind="nameFilter1" placeholder="工作名..." style="width:180px" />
    <input type="search" autofocus @bind="nameFilter2" placeholder="CTP型号..." style="width:100px" />
    <input type="search" autofocus @bind="nameFilter3" placeholder="要求说明..." style="width:120px" />
    <input type="search" autofocus @bind="nameFilter4" placeholder="送货地点..." style="width:100px" />
    <input type="search" autofocus @bind="nameFilter5" placeholder="制作员..." style="width:100px" list="ygoptions" />
    <button class="btn btn-primary" @onclick="查询">查询</button>
    <button class="btn btn-primary" @onclick="查询我的">我的</button>
    <button class="btn btn-primary" @onclick="清空搜索项">清空</button>
</div>


@if (ls == null)
{
    <p><em>Loading...</em></p>
}
else
{
   
    <table class="table tablemini">
        <thead class="Stickyheader">
            <tr class="ttr">
                <th style="width: 58px">
                    <button class="btn trbtn" @onclick="@(() => SortData("编号"))">
                        编号<img src="@GetSortIndicator("编号")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 98px">
                    <button class="btn trbtn" @onclick="@(() => SortData("日期"))">
                        日期<img src="@GetSortIndicator("日期")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 105px">
                    <button class="btn trbtn" @onclick="@(() => SortData("客户"))">
                        客户<img src="@GetSortIndicator("客户")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>

                <th style="width: 138px">
                    <button class="btn trbtn" @onclick="@(() => SortData("文件或工作名"))">
                        文件或工作名<img src="@GetSortIndicator("文件或工作名")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 39px">
                    <button class="btn trbtn" @onclick="@(() => SortData("长"))">
                        长<img src="@GetSortIndicator("长")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 39px">
                    <button class="btn trbtn" @onclick="@(() => SortData("宽"))">
                        宽<img src="@GetSortIndicator("宽")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 36px">
                    <button class="btn trbtn" @onclick="@(() => SortData("数量"))">
                        数量<img src="@GetSortIndicator("数量")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 158px">
                    <button class="btn trbtn" @onclick="@(() => SortData("要求说明"))">
                        要求说明<img src="@GetSortIndicator("要求说明")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 35px; background-color:rgba(255,225,215,0.5)">
                    <button class="btn trbtn" @onclick="@(() => SortData("急"))">
                        急<img src="@GetSortIndicator("急")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 90px">
                    <button class="btn trbtn" @onclick="@(() => SortData("送货地点"))">
                        送货地点<img src="@GetSortIndicator("送货地点")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 35px; background-color:rgba(128,255,138,0.5)">
                    <button class="btn trbtn" @onclick="@(() => SortData("完成"))">
                        完成<img src="@GetSortIndicator("完成")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 87px">
                    <button class="btn trbtn" @onclick="@(() => SortData("板材型号"))">
                        板材型号<img src="@GetSortIndicator("板材型号")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 44px">
                    <button class="btn trbtn" @onclick="@(() => SortData("咬口"))">
                        咬口<img src="@GetSortIndicator("咬口")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 44px">
                    <button class="btn trbtn" @onclick="@(() => SortData("方向"))">
                        方向<img src="@GetSortIndicator("方向")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 44px">
                    <button class="btn trbtn" @onclick="@(() => SortData("线数"))">
                        线数<img src="@GetSortIndicator("线数")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 78px">
                    <button class="btn trbtn" @onclick="@(() => SortData("网点类型"))">
                        网点形状<img src="@GetSortIndicator("网点类型")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 66px">
                    <button class="btn trbtn" @onclick="@(() => SortData("设计费"))">
                        设计费<img src="@GetSortIndicator("设计费")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 66px">
                    <button class="btn trbtn" @onclick="@(() => SortData("CTP费"))">
                        CTP费<img src="@GetSortIndicator("CTP费")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 66px">
                    <button class="btn trbtn" @onclick="@(() => SortData("其他费用"))">
                        其他费<img src="@GetSortIndicator("其他费用")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 35px">
                    <button class="btn trbtn" @onclick="@(() => SortData("已优惠"))">
                        已优惠<img src="@GetSortIndicator("已优惠")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 78px">
                    <button class="btn trbtn" @onclick="@(() => SortData("应收"))" style="text-align:right">
                        应收<img src="@GetSortIndicator("应收")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>

                <th style="width: 35px">
                    <button class="btn trbtn" @onclick="@(() => SortData("结清"))">
                        结清<img src="@GetSortIndicator("结清")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 80px">
                    <button class="btn trbtn" @onclick="@(() => SortData("备注"))">
                        备注<img src="@GetSortIndicator("备注")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 66px">
                    <button class="btn trbtn" @onclick="@(() => SortData("制作员"))">
                        制作员<img src="@GetSortIndicator("制作员")" width="18" alt="↓" />
                    </button>
                    <div class="resize-handle"></div>
                </th>
                <th style="width: 25px">X</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in currentPageItems)
            {
                <tr class="check-completed-row">
                    <td style="width:70px">@forecast.编号</td>
                    <td><input @bind="forecast.输出日期" id="日期" type="date" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td>
                        <input @bind="forecast.客户" type="text" @bind:after="@(() => 更新数据(forecast))" list="options" />
                    </td>
                    <td><input @bind="forecast.文件或工作名" type="text" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td><input @bind="forecast.长" type="text" style=" text-align: right; background-color:rgba(235,255,215,0.3)" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td><input @bind="forecast.宽" type="text" style=" text-align: right; background-color:rgba(235,255,215,0.3)" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td><input @bind="forecast.总色数" type="text" style=" text-align: center" @bind:after="@(() => 计算CTP价格(forecast))" /></td>
                    <td><input @bind="forecast.输出要求" type="text" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td><input @bind="forecast.急" type="checkbox" style="background-color:rgba(255,225,215,0.5)" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td><input @bind="forecast.送货地点" type="text" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td><input @bind="forecast.已输出" class="cb-completed" type="checkbox" @bind:after="@(() => 更新数据(forecast))" /></td>

                     <td>
                        <input @bind="forecast.CTP板材型号" type="text" list="zzoptions" @bind:after="@(() => 计算CTP价格(forecast))" />

                    </td>
                    <td>
                        <input @bind="forecast.印刷机咬口要求" type="text" list="ykoptions" @bind:after="@(() => 更新数据(forecast))" />

                    </td>
                    <td>
                        <input @bind="@(forecast.咬口方向)" list="fxoptions" type="text" @bind:after="@(() => 更新数据(forecast))" />

                    </td>
                    <td>
                        <input @bind="forecast.加网线数" type="text" list="wxoptions" @bind:after="@(() => 更新数据(forecast))" />

                    </td>
                    <td>
                        <input @bind="forecast.网点类型" type="text" list="wdoptions" @bind:after="@(() => 更新数据(forecast))" />

                    </td>
                    <td>
                        <input type="number" style="text-align: right; background-color:rgba(225,255,238,0.5)"
                               value="@(forecast.设计制作费?.ToString("F2") ?? "NULL")"
                               @onchange="@(e => forecast.设计制作费 = decimal.TryParse(e.Value?.ToString(), out decimal d) ? d : 0)"
                               @onblur="@(() => 合计CTP价格(forecast))"
                               @ondblclick="@(e => ShowCalcR(e, forecast))" />
                    </td>
                    <td>
                        <input type="number" style="text-align: right; background-color:rgba(255,255,228,0.5)"
                               value="@(forecast.版费?.ToString("F2") ?? "NULL")"
                               @onchange="@(e => forecast.版费 = decimal.TryParse(e.Value?.ToString(), out decimal d) ? d : 0)"
                               @onblur="@(() => 合计CTP价格(forecast))" />
                    </td>
                    <td>
                        <input type="number" style="text-align: right; background-color:rgba(255,235,228,0.5)"
                               value="@(forecast.其他费用?.ToString("F2") ?? "NULL")"
                               @onchange="@(e => forecast.其他费用 = decimal.TryParse(e.Value?.ToString(), out decimal d) ? d : 0)"
                               @onblur="@(() => 合计CTP价格(forecast))" />
                    </td>
                    <td><input @bind="forecast.已优惠" type="checkbox" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td>
                        <input type="number" style="text-align: right; background-color:rgba(255,255,208,0.5)"
                               value="@(forecast.应收?.ToString("F2") ?? "NULL")"
                               @onchange="@(e => forecast.应收 = decimal.TryParse(e.Value?.ToString(), out decimal d) ? d : 0)"
                               @onblur="@(() => 更新数据(forecast))" />
                    </td>
                    <td><input @bind="forecast.结清" type="checkbox" disabled /></td>
                    <td><input @bind="forecast.备注" type="text" @bind:after="@(() => 更新数据(forecast))" /></td>
                    <td>
                        <input @bind="forecast.制作员1" type="text" @bind:after="@(() => 更新数据(forecast))" list="ygoptions" />

                    </td>
                    <td> <button class="btn trbtn" @onclick="@(() => ShowDeleteEvent(forecast))" style="color:red"><img src="/image/red-trash2.svg" width="18" class="bi" aria-hidden="true" alt="删" /></button></td>
                </tr>
            }

        </tbody>


    </table>

    <!-- 输入框下拉列表 -->
    <datalist id="options">
        <option value="现金"></option>
        <option value="临时"></option>
        @if (kh != null) foreach (var fore in kh)
            {
                <option value="@fore.客户ID"></option>
            }

    </datalist>
    <datalist id="ygoptions">
        @if (yglist != null) foreach (var foryg in yglist)
            {
                <option value="@foryg.姓名"></option>
            }
    </datalist>
    <datalist id="zzoptions">
        @if (xhlist != null) foreach (var forzz in xhlist)
            {
                <option value="@forzz.CTP板材型号ID"></option>
            }
    </datalist>
    <datalist id="ykoptions">
        @if (ykdxlist != null) foreach (var forzz in ykdxlist)
            {
                <option value="@forzz.印刷机咬口要求"></option>
            }
    </datalist>
    <datalist id="fxoptions">
        <option value="上"></option>
        <option value="下"></option>
        <option value="左"></option>
        <option value="右"></option>
    </datalist>
    <datalist id="wxoptions">
        @if (wxlist != null) foreach (var forzz in wxlist)
            {
                <option value="@forzz.加网线数"></option>
            }
    </datalist>
    <datalist id="wdoptions">
        @if (wdlist != null) foreach (var forzz in wdlist)
            {
                <option value="@forzz.网点类型"></option>
            }
    </datalist>


    <!-- 分页控件 -->
    <div class="pagination">
        <button class="btn btn-primary" @onclick="新插一行">新建</button>


        <span>共: <strong>@numResults()</strong>条</span>

        <button class="btn btn-primary" @onclick="FirstPage" disabled="@(currentPage == 1)">首页</button>
        <button class="btn btn-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">上一页</button>

        <span>第 @currentPage 页 / 共 @totalPages 页</span>
        <span>每页: </span>
        <select @bind="pageSize" @bind:after="UpdatePagination">
            <option value="15">15</option>
            <option value="30">30</option>
            <option value="80">80</option>
            <option value="200">200</option>
            <option value="500">500</option>
        </select>

        <button class="btn btn-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">下一页</button>
        <button class="btn btn-primary" @onclick="LastPage" disabled="@(currentPage == totalPages)">末页</button>

        <input type="number" min="1" max="@totalPages" @bind="gotoPage" style="width:60px" />
        <button class="btn btn-primary" @onclick="GoToPage">跳转</button>
    </div>

}

@if (ShowDelete)
{
        <div class="custom-dialog" @onclick:stopPropagation>
            <div class="dialog-content">
                <h3> 是否确定要删除：</h3>
                <h4> @aa</h4>
                <p><button class="dialog-button" @onclick="Deleteit">确定删除</button> <button class="dialog-button" @onclick="HideDeleteEvent">取消</button></p>
            </div>
        </div>
}


<!-- 设计费计算对话框 -->
@if (ShowCalcDialog)
{

    <div class="calc-dialog" style="@CalcDialogStyle">
        <div class="calcdialog-header" data-drag-parent=".calc-dialog">
            <div class="calcdialog-title">制作费参考：</div>
            <button class="calcclose-btn" @onclick="关闭计算对话框">×</button>
        </div>
        <div class="container">

            <button @onclick="@(() => 按色数计算(zzfs1))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs1.ToString("0.00")</span> ￥@色数计算设计费(zzfs1)
            </button>
            <button @onclick="@(() => 按色数计算(zzfs2))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs2.ToString("0.00")</span> ￥@色数计算设计费(zzfs2)
            </button>
            <button @onclick="@(() => 按色数计算(zzfs3))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs3.ToString("0.00")</span> ￥@色数计算设计费(zzfs3)
            </button>
            <button @onclick="@(() => 按色数计算(zzfs4))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs4.ToString("0.00")</span> ￥@色数计算设计费(zzfs4)
            </button>
            <button @onclick="@(() => 按色数计算(zzfs5))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs5.ToString("0.00")</span> ￥@色数计算设计费(zzfs5)
            </button>
            <button @onclick="@(() => 按色数计算(zzfs6))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs6.ToString("0.00")</span> ￥@色数计算设计费(zzfs6)
            </button>
            <button @onclick="@(() => 按色数计算(zzfs7))" class="calcbutton-a">
                <span style="color:#8899AA">每色 @zzfs7.ToString("0.00")</span> ￥@色数计算设计费(zzfs7)
            </button>
        </div>
        <div class="container">
            <button @onclick="@(() => 按面积计算(zzfp1))" class="calcbutton-a">
                <span style="color:#88A999">每平 @zzfp1.ToString("0.00")</span> ￥@面积计算设计费(zzfp1)
            </button>
            <button @onclick="@(() => 按面积计算(zzfp2))" class="calcbutton-a">
                <span style="color:#88A999">每平 @zzfp2.ToString("0.00")</span> ￥@面积计算设计费(zzfp2)
            </button>
            <button @onclick="@(() => 按面积计算(zzfp3))" class="calcbutton-a" style="border: 1px solid #f99999;">
                <span style="color:#88A999">每平 @zzfp3.ToString("0.00")</span> ￥@面积计算设计费(zzfp3)
            </button>
            <button @onclick="@(() => 按面积计算(zzfp4))" class="calcbutton-a">
                <span style="color:#88A999">每平 @zzfp4.ToString("0.00")</span> ￥@面积计算设计费(zzfp4)
            </button>
            <button @onclick="@(() => 按面积计算(zzfp5))" class="calcbutton-a">
                <span style="color:#88A999">每平 @zzfp5.ToString("0.00")</span> ￥@面积计算设计费(zzfp5)
            </button>
            <button @onclick="@(() => 按面积计算(zzfp6))" class="calcbutton-a" style="border: 1px solid #f99999;">
                <span style="color:#88A999">每平 @zzfp6.ToString("0.00")</span> ￥@面积计算设计费(zzfp6)
            </button>
            <button @onclick="@(() => 按面积计算(zzfp7))" class="calcbutton-a">
                <span style="color:#88A999">每平 @zzfp7.ToString("0.00")</span> ￥@面积计算设计费(zzfp7)
            </button>
        </div>
    </div>
}



@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    AuthState? AuthState;

    bool 自动刷新 = false;
    private Timer? 刷新定时器;
    private int d = 300; // 单位秒，默认每5分钟刷新一次

    string nameFilter = string.Empty;
    string nameFilter1 = string.Empty;
    string nameFilter2 = string.Empty;
    string nameFilter3 = string.Empty;
    string nameFilter4 = string.Empty;
    string nameFilter5 = string.Empty;


    private 客户表[]? kh;
    public 员工[]? yglist;
    public CTP板材型号[]? xhlist;
    public CTP印刷机咬口要求[]? ykdxlist;
    public CTP加网线数[]? wxlist;
    public CTP网点类型[]? wdlist;
    public 公用设置[]? gset;

    int? Text1 = null;
    DateTime date1 = DateTime.Now.AddDays(-1);
    DateTime date2 = DateTime.Now;

    private 工作表_CTP输出[]? ls;
    private IQueryable<工作表_CTP输出>? items;

    protected override async Task OnInitializedAsync()
    {
        AuthState = authenticationState?.Result as AuthState;
        ls = HongtengDbCon.Db.Queryable<工作表_CTP输出>().Where(it => it.输出日期.Value.Date == DateTime.Now.Date).Where(it => it.IsDelete == false).OrderBy(it => it.编号).ToArray();
        items = ls.AsQueryable();

        UpdatePagination();

        await InvokeAsync(StateHasChanged);

        刷新定时器 = new Timer(刷新, null, TimeSpan.Zero, TimeSpan.FromSeconds(d));

    }

    private void 刷新(object? state)
    {
        if (自动刷新)
        {
            InvokeAsync(() =>
            {
                查询今天();
                items = items.OrderByDescending(x => x.已输出);
                // 计算总页数
                int totalCount = items.Count();
                totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
                currentPage = totalPages; // 跳到最后一页
                UpdatePagination();
                StateHasChanged();
            });
        }
    }
    public void Dispose()
    {
        // 组件销毁时停止并释放计时器，防止内存泄漏
        刷新定时器?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            kh = HongtengDbCon.Db.Queryable<客户表>().Where(it => it.IsDelete == false).ToArray();
            yglist = HongtengDbCon.Db.Queryable<员工>().Where(it => it.是否已离职 != true).ToArray();
            xhlist = HongtengDbCon.Db.Queryable<CTP板材型号>().ToArray();
            ykdxlist = HongtengDbCon.Db.Queryable<CTP印刷机咬口要求>().ToArray();
            wxlist = HongtengDbCon.Db.Queryable<CTP加网线数>().ToArray();
            wdlist = HongtengDbCon.Db.Queryable<CTP网点类型>().ToArray();
            gset = HongtengDbCon.Db.Queryable<公用设置>().Where(it => it.ID == 1).ToArray();
            await InvokeAsync(StateHasChanged);
        }

    }

    public int numResults()
    {
        int Count = items.Count();
        return Count;
    }
    public float? TotalQuantity()  //数量合计
    {
        float? total = items.Sum(item => item.总色数);
        return total;
    }
    public decimal? Totalprice()  //价格合计
    {
        decimal? total = items.Sum(item => item.应收);
        return total;
    }

    private void 查询今天()
    {
        ls = HongtengDbCon.Db.Queryable<工作表_CTP输出>().Where(it => it.输出日期.Value.Date == DateTime.Now.Date).OrderBy(it=>it.编号).ToArray();
        items = ls.AsQueryable().Where(it => it.IsDelete == false);

        currentPage = 1; // 重置到第一页
        UpdatePagination();
    }
    private void 查询昨天()
    {
        ls = HongtengDbCon.Db.Queryable<工作表_CTP输出>().Where(it => it.输出日期.Value.Date == DateTime.Now.AddDays(-1).Date).OrderBy(it => it.编号).ToArray();
        items = ls.AsQueryable().Where(it => it.IsDelete == false);

        currentPage = 1; // 重置到第一页
        UpdatePagination();
    }
    private void 查询前天()
    {
        ls = HongtengDbCon.Db.Queryable<工作表_CTP输出>().Where(it => it.输出日期.Value.Date == DateTime.Now.AddDays(-2).Date).OrderBy(it => it.编号).ToArray();
        items = ls.AsQueryable().Where(it => it.IsDelete == false);

        currentPage = 1; // 重置到第一页
        UpdatePagination();
    }
    private void 按编号查询()
    {
        if (Text1>0)
        {
            ls = HongtengDbCon.Db.Queryable<工作表_CTP输出>().Where(it => it.编号 == Text1).ToArray();
            items = ls.AsQueryable();
        }
        currentPage = 1; // 重置到第一页
        UpdatePagination();
    }

    private void 查询我的()
    {
        if (AuthState != null)
        {
            nameFilter5 = AuthState.UserName ?? "";
            查询();
        }
    }
    private void 查询()
    {
        DateTime d1 = date1;
        DateTime d2 = date2;

        if (date2 < date1)
        {
            d1 = date2;
            d2 = date1;
        }


        ls = HongtengDbCon.Db.Queryable<工作表_CTP输出>()
             .WhereIF(true, it => it.输出日期.Value.Date >= d1.Date && it.输出日期.Value.Date <= d2.Date)
             .WhereIF(!string.IsNullOrEmpty(nameFilter), it => it.客户.Contains(nameFilter))
             .WhereIF(!string.IsNullOrEmpty(nameFilter1), it => it.文件或工作名.Contains(nameFilter1))
             .WhereIF(!string.IsNullOrEmpty(nameFilter2), it => it.CTP板材型号.Contains(nameFilter2))
             .WhereIF(!string.IsNullOrEmpty(nameFilter3), it => it.输出要求.Contains(nameFilter3))
             .WhereIF(!string.IsNullOrEmpty(nameFilter4), it => it.送货地点.Contains(nameFilter4))
             .WhereIF(!string.IsNullOrEmpty(nameFilter5), it => it.制作员1.Contains(nameFilter5)).OrderBy(it => it.编号).ToArray();

        items = ls.AsQueryable().Where(it => it.IsDelete == false);

        currentPage = 1; // 重置到第一页
        UpdatePagination();

    }


    private void 清空搜索项()
    {
        date1 = DateTime.Now.AddDays(-1);
        date2 = DateTime.Now;
        nameFilter = string.Empty;
        nameFilter1 = string.Empty;
        nameFilter2 = string.Empty;
        nameFilter3 = string.Empty;
        nameFilter4 = string.Empty;
        nameFilter5 = string.Empty;

    }
    private void 新插一行()
    {
        var ddd = HongtengDbCon.Db.Insertable(new 工作表_CTP输出() { 客户 = "", 输出日期 = DateTime.Now, 制作员1 = AuthState?.UserName, 总色数 = 0, 其他费用 = 0, 版费 = 0, 设计制作费 = 0, 应收=0,IsDelete = false }).IgnoreColumns(ignoreNullColumn: true).ExecuteReturnEntity();
        var dda = ls.ToList();
        dda.Add(ddd);
        ls = dda.ToArray();
        items = ls.AsQueryable().Where(it => it.IsDelete == false);

        // 计算总页数
        int totalCount = items.Count();
        totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);
        currentPage = totalPages; // 跳到最后一页
        UpdatePagination();

    }

    private void 更新数据(工作表_CTP输出 p)
    {
         
        HongtengDbCon.Db.Updateable(p).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommand();
    }


    //弹出窗口-软删除一条
    string? aa;
    public 工作表_CTP输出? pp;
    public bool ShowDelete { get; set; }
    private void HideDeleteEvent()
    {
        ShowDelete = false;
    }
    private void ShowDeleteEvent(工作表_CTP输出 p)
    {
        pp = p;
        aa = pp.编号+"，"+pp.客户 + "【" + pp.文件或工作名+"】";
        ShowDelete = true;
    }
    private void Deleteit()
    {
        pp.IsDelete = true;
         
        HongtengDbCon.Db.Updateable(pp).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommand();
        items = ls.AsQueryable().Where(it => it.IsDelete == false);
       
        ShowDelete = false;

        UpdatePagination();
    }

    public 工作表_CTP输出? ctp;
    private void 计算CTP价格(工作表_CTP输出 ctp) //计算CTP价格
    {
        decimal dj = 0;
        if (HongtengDbCon.Db.Queryable<CTP板材型号>().Any(it => it.CTP板材型号ID == ctp.CTP板材型号))
        {
            dj = HongtengDbCon.Db.Queryable<CTP板材型号>().First(it => it.CTP板材型号ID == ctp.CTP板材型号).价格 ?? 25; //如果价格为null则取值25
        }
        else
        {
            dj = 25;
        }
        decimal ss = (decimal)(ctp.总色数 ?? 0.0f) ;
        ctp.版费 = ss * dj;
        ctp.应收 = ctp.其他费用 + ctp.版费 + ctp.设计制作费;
         
        HongtengDbCon.Db.Updateable(ctp).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommand(); //更新数据
    }
    private void 合计CTP价格(工作表_CTP输出 ctp) //计算CTP价格
    {
        ctp.应收 = ctp.其他费用 + ctp.版费 + ctp.设计制作费;
         
        HongtengDbCon.Db.Updateable(ctp).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommand(); //更新数据
    }


    public async Task DownloadExcel()
    {
        using (XLWorkbook workbook = new XLWorkbook())
        {
            IXLWorksheet worksheet = workbook.AddWorksheet("Mysheet");

            worksheet.Cell(1, 1).Value = "完成";
            worksheet.Cell(1, 2).Value = "编号";
            worksheet.Cell(1, 3).Value = "日期";
            worksheet.Cell(1, 4).Value = "客户";
            worksheet.Cell(1, 5).Value = "工作名";
            worksheet.Cell(1, 6).Value = "数量";
            worksheet.Cell(1, 7).Value = "板材型号";
            worksheet.Cell(1, 8).Value = "价格";
            worksheet.Cell(1, 9).Value = "要求";
            worksheet.Cell(1, 10).Value = "送货地址";
            worksheet.Cell(1, 11).Value = "制作员";
            worksheet.Cell(1, 12).Value = "备注";

            worksheet.Row(1).Style.Font.Bold = true;


            int row = 2;
            foreach (var forzz in items)
            {
                worksheet.Cell(row, 1).Value = forzz.已输出.ToString();
                worksheet.Cell(row, 2).Value = forzz.编号.ToString();
                worksheet.Cell(row, 3).Value = forzz.输出日期;
                worksheet.Cell(row, 4).Value = forzz.客户;
                worksheet.Cell(row, 5).Value = forzz.文件或工作名;
                worksheet.Cell(row, 6).Value = forzz.总色数;
                worksheet.Cell(row, 7).Value = forzz.CTP板材型号;
                worksheet.Cell(row, 8).Value = forzz.应收;
                worksheet.Cell(row, 9).Value = forzz.输出要求;
                worksheet.Cell(row, 10).Value = forzz.送货地点;
                worksheet.Cell(row, 11).Value = forzz.制作员1;
                worksheet.Cell(row, 12).Value = forzz.备注;
                row++;
            }


            // 创建内存流用于保存工作簿
            using (var memoryStream = new MemoryStream())
            {
                // 将工作簿保存到内存流中
                workbook.SaveAs(memoryStream);

                // 重置内存流的位置，以确保从头开始读取
                memoryStream.Position = 0;

                // 这里可以将内存流进行进一步处理，例如发送为电子邮件附件或者作为API响应返回等
                var fileName = "CTP制版" + DateTime.Now.ToString()+".xlsx";

                using var streamRef = new DotNetStreamReference(stream: memoryStream);

                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            }
        }

    }



    // -------------------------------------排序-----------------------------------
    // 排序状态
    private string currentSortColumn = "";
    private bool isAscending = true;

    // 列名映射 - 确保属性名正确
    private readonly Dictionary<string, string> columnMappings = new Dictionary<string, string>
    {
        { "编号", "编号" },
        { "日期", "输出日期" },
        { "客户", "客户" },
        { "文件或工作名", "文件或工作名" },
        { "长", "长" },
        { "宽", "宽" },
        { "数量", "总色数" },
        { "要求说明", "输出要求" },
        { "急", "急" },
        { "送货地点", "送货地点" },
        { "完成", "已输出" },
        { "板材型号", "CTP板材型号" },
        { "咬口", "印刷机咬口要求" },
        { "方向", "咬口方向" },
        { "线数", "加网线数" },
        { "网点类型", "网点类型" },
        { "设计费", "设计制作费" },
        { "CTP费", "版费" },
        { "其他费用", "其他费用" },
        { "已优惠", "已优惠" },
        { "应收", "应收" },
        { "结清", "结清" },
        { "制作员", "制作员1" },
        { "备注", "备注" }
    };

    // 通用排序方法 - 添加 StateHasChanged 调用
    private void SortData(string columnName)
    {
        if (!columnMappings.TryGetValue(columnName, out var propertyName))
            return;

        if (currentSortColumn == columnName)
        {
            // 相同列切换排序方向
            isAscending = !isAscending;
        }
        else
        {
            // 新列默认升序
            currentSortColumn = columnName;
            isAscending = true;
        }

        // 应用排序
        try
        {
            if (isAscending)
            {
                items = items.OrderByDynamic(propertyName);
            }
            else
            {
                items = items.OrderByDescendingDynamic(propertyName);
            }

            // 强制刷新UI
            UpdatePagination();

        }
        catch (Exception ex)
        {
            Console.WriteLine($"排序错误: {ex.Message}");
        }

        currentPage = 1; // 排序后回到第一页
        UpdatePagination();

    }

    // 取消排序方法
    private void 取消排序()
    {
        currentSortColumn = "";
        isAscending = true;

        // 重置为默认排序（按日期降序，编号升序）
        //items = items.OrderByDescending(x => x.日期).ThenBy(x => x.编号);
        // 重置为默认排序（按编号升序）
        items = items.OrderBy(x => x.编号);
        currentPage = 1;
        UpdatePagination();
    }

    // 获取排序指示器图片 - 确保路径正确
    private string GetSortIndicator(string columnName)
    {
        if (currentSortColumn != columnName)
            return "/image/arrowNone.svg"; // 无排序状态

        return isAscending ? "/image/arrowUp.svg" : "/image/arrowDown.svg";
    }


    // --------------------------------分页相关变量-----------------------------
    private int currentPage = 1;
    private int pageSize = 80;
    private int totalPages = 1;
    private int gotoPage = 1;
    private 工作表_CTP输出[]? currentPageItems;

    // 其他现有变量保持不变...

    // 分页方法
    private void UpdatePagination()
    {
        if (items == null || !items.Any())
        {
            totalPages = 1;
            currentPageItems = Array.Empty<工作表_CTP输出>();
            return;
        }

        // 计算总页数
        int totalCount = items.Count();
        totalPages = (int)Math.Ceiling(totalCount / (double)pageSize);

        // 确保当前页在有效范围内
        currentPage = Math.Clamp(currentPage, 1, totalPages);

        // 获取当前页数据
        currentPageItems = items
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToArray();
    }

    private void FirstPage()
    {
        currentPage = 1;
        UpdatePagination();
    }

    private void PreviousPage()
    {
        currentPage = Math.Max(1, currentPage - 1);
        UpdatePagination();
    }

    private void NextPage()
    {
        currentPage = Math.Min(totalPages, currentPage + 1);
        UpdatePagination();
    }

    private void LastPage()
    {
        currentPage = totalPages;
        UpdatePagination();
    }

    private void GoToPage()
    {
        currentPage = Math.Clamp(gotoPage, 1, totalPages);
        UpdatePagination();
    }



    //-----------------------------设计费价格计算对话框------------------------------
    public bool ShowCalcDialog { get; set; }
    public 工作表_CTP输出? dataItem;
    public string CalcDialogStyle { get; set; } = "";
    private decimal zzfs1 = 0;
    private decimal zzfs2 = 0;
    private decimal zzfs3 = 0;
    private decimal zzfs4 = 0;
    private decimal zzfs5 = 0;
    private decimal zzfs6 = 0;
    private decimal zzfs7 = 0;
    private decimal zzfp1 = 0;
    private decimal zzfp2 = 0;
    private decimal zzfp3 = 0;
    private decimal zzfp4 = 0;
    private decimal zzfp5 = 0;
    private decimal zzfp6 = 0;
    private decimal zzfp7 = 0;

    private void ShowCalcR(MouseEventArgs e, 工作表_CTP输出 p)
    {
        if (gset != null) // Ensure gset is not null before accessing it
        {
            zzfs1 = gset.FirstOrDefault()?.计算每色一 ?? 5;
            zzfs2 = gset.FirstOrDefault()?.计算每色二 ?? 10;
            zzfs3 = gset.FirstOrDefault()?.计算每色三 ?? 15;
            zzfs4 = gset.FirstOrDefault()?.计算每色四 ?? 2;
            zzfs5 = gset.FirstOrDefault()?.计算每色五 ?? 25;
            zzfs6 = gset.FirstOrDefault()?.计算每色六 ?? 30;
            zzfs7 = gset.FirstOrDefault()?.计算每色七 ?? 40;
            zzfp1 = gset.FirstOrDefault()?.计算每平米一 ?? 50;
            zzfp2 = gset.FirstOrDefault()?.计算每平米二 ?? 100;
            zzfp3 = gset.FirstOrDefault()?.计算每平米三 ?? 150;
            zzfp4 = gset.FirstOrDefault()?.计算每平米四 ?? 200;
            zzfp5 = gset.FirstOrDefault()?.计算每平米五 ?? 250;
            zzfp6 = gset.FirstOrDefault()?.计算每平米六 ?? 300;
            zzfp7 = gset.FirstOrDefault()?.计算每平米七 ?? 400;
        }
        else
        {
            // Handle the case where gset is null, e.g., set default values or log an error
            zzfs1 = 5;
            zzfs2 = 10;
            zzfs3 = 15;
            zzfs4 = 2;
            zzfs5 = 25;
            zzfs6 = 30;
            zzfs7 = 40;
            zzfp1 = 50;
            zzfp2 = 100;
            zzfp3 = 150;
            zzfp4 = 200;
            zzfp5 = 250;
            zzfp6 = 300;
            zzfp7 = 400;
        }

        dataItem = p;
        CalcDialogStyle = $"left:{e.ClientX - 600}px; top:{e.ClientY + 25}px;";
        ShowCalcDialog = true;
    }

    private void 按色数计算(decimal i)  
    {  
        if (dataItem != null) // Ensure dataItem is not null before accessing its properties  
        {  
            dataItem.设计制作费 = 色数计算设计费(i) ?? 0;  
            dataItem.应收 = (dataItem.其他费用 ?? 0) + (dataItem.设计制作费 ?? 0) + (dataItem.版费 ?? 0);  
            HongtengDbCon.Db.Updateable(dataItem).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommand();  
        }  
        ShowCalcDialog = false;  
    }  

    private void 按面积计算(decimal i)  
    {  
        if (dataItem != null) // Ensure dataItem is not null before accessing its properties  
        {  
            dataItem.设计制作费 = 面积计算设计费(i) ?? 0;  
            dataItem.应收 = (dataItem.其他费用 ?? 0) + (dataItem.设计制作费 ?? 0) + (dataItem.版费 ?? 0);  
            HongtengDbCon.Db.Updateable(dataItem).IgnoreColumns(ignoreAllNullColumns: true).ExecuteCommand();  
        }  
        ShowCalcDialog = false;  
    }


    private void 关闭计算对话框()
    {
        ShowCalcDialog = false;
    }

    public decimal? 色数计算设计费(decimal i)
    {
        return (decimal?)dataItem?.总色数 * i;
    }

    public decimal? 面积计算设计费(decimal i)
    {
        return (decimal?)dataItem?.长 * (decimal?)dataItem?.宽 * (decimal?)dataItem?.总色数 * i * 0.000001m;
    }


}
