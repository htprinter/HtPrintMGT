@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@implements IDisposable
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage


<AuthorizeView>
    <Authorized>
        <div class="nav-item px-1">
            <NavLink class="nav-link" href="Account/Manage">
                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span>@(账号名())
            </NavLink>
        </div>
        <div class="nav-item">

            <AntiforgeryToken />
            <button type="submit" class="nav-link" @onclick="LogOut">
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> 注销登录
            </button>

        </div>
    </Authorized>
    <NotAuthorized>
        <div class="nav-item">
            <NavLink class="nav-link" href="Account/Register">
                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> 注册用户
            </NavLink>
        </div>
        <div class="nav-item">
            <NavLink class="nav-link" href="Account/Login">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> 用户登录
            </NavLink>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    AuthState? AuthState;
    protected override async Task OnInitializedAsync()
    {
        AuthState = authenticationState?.Result as AuthState;
        await InvokeAsync(StateHasChanged);
    }


    async Task LogOut()
    {
        //用户名写入存储
        await localStorage.RemoveItemAsync("UserName");

        await localStorage.RemoveItemAsync("Phone");

        await localStorage.RemoveItemAsync("Password");

        NavigationManager.NavigateTo("/Account/Login", true);
    }

    private string 账号名()
    {
        AuthState = authenticationState?.Result as AuthState;
        if (AuthState==null)
        {
            return "账户信息";
        }
        else
        {
            return AuthState.UserName ?? "账户信息";
        }
        
    }

}

